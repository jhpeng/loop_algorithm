#ifndef loops_h
#define loops_h

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <math.h>
#include <gsl/gsl_rng.h>

#define NDEBUG
#include <assert.h>

#include "chain.h"
#include "table.h"

/**
 * @brief Update the table by traversing through the list and updating the states and links.
 *
 * This function goes through the list of the input table, and for each non-empty item, it
 * updates the states and links based on the current link_spin value. After updating, it
 * checks if the updated states are the same for all the spins and, if so, sets the key to
 * UINT64_MAX and decreases the table's 'n' value.
 *
 * @param t Pointer to the table structure to be updated.
 */
void loops_update_table(table* t);

/**
 * @brief Update the state of a chain based on the table and a random number generator.
 *
 * This function iterates over the nodes of the input chain and updates the states of the nodes
 * based on the corresponding item in the table. It sets the state of the chain based on the
 * state of the first node. If there are no nodes in the chain, the chain's state is updated
 * based on a random number generated by the input random number generator.
 *
 * @param c Pointer to the chain structure to be updated.
 * @param t Pointer to the table structure containing the required data.
 * @param rng Pointer to the GSL random number generator.
 */
void loops_update_chain(
                chain* c, 
                table* t, 
                gsl_rng* rng);

/**
 * @brief Link the vertices of a chain with the vertices in a table.
 *
 * This function iterates over the nodes of the input chain and links the vertices based on
 * the data in the table. It connects the vertices in a circular fashion, so the last node
 * is linked to the first node.
 *
 * @param c Pointer to the chain structure containing the vertices.
 * @param t Pointer to the table structure containing the required data.
 */
void loops_link_vertex(
                chain* c, 
                table* t);

/**
 * @brief Traverse through a table and loop the linked items based on a random number generator.
 *
 * This function iterates over the items in the table and, for each non-empty item, it goes
 * through the spins and calls the loops_looping function if the link_spin is non-negative.
 *
 * @param t Pointer to the table structure to be traversed.
 * @param rng Pointer to the GSL random number generator.
 */
void loops_traverse(
                table* t, 
                gsl_rng* rng);

#endif
